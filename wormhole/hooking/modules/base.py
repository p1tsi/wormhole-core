import os

from datetime import datetime

from ..connector_manager import ConnectorManager


class Message:
    """
    Class representing a message coming from the agent (with the 'send' function) when the hook functionality is on.
    """

    def __init__(self, message: dict, data: bytes):
        """
        :param message: A message is an object whose payload have the following keys:
                    - timestamp
                    - tid: thread ID
                    - type: module of the function. ie: 'io' or 'network'
                    - symbol: name of the function from which the message is received
                    - data: this is an object made up of two keys:
                        - args: a list of input arguments for the function
                        - ret: the return value of the function
        :param data: Raw bytes (for example when hooking read/write function).
        """
        self.timestamp = message['payload'].get('timestamp', '')
        self.tid = message['payload'].get('tid', '')
        self.module = message['payload'].get('type', '')
        self.symbol = message['payload'].get('symbol', '')

        func_data = message['payload'].get('data', {})
        self.args = func_data.get("args", [])
        self.ret = func_data.get("ret", "")
        self.data = data

    def __repr__(self):
        return f"{datetime.fromtimestamp((self.timestamp / 1000))} [{self.tid}] {self.module}:\t__MSG_TO_BE_PARSED__"


class BaseModule:

    def __init__(self, data_dir: str, connector_manager: ConnectorManager):
        """
        Initialize base module
        :param data_dir: base data directory
        :param connector_manager: manager of output connectors
        """
        self._module_dir = self._create_module_dir(data_dir, self.__class__.__name__)
        self._connector_manager: ConnectorManager = connector_manager
        self.message = None

    @staticmethod
    def _create_module_dir(data_dir: str, module_name: str) -> str:
        """
        Create directory that contains files generated by modules
        :param data_dir: main data directory
        :param module_name: the name of the module
        :return: directory path
        """

        module_dir = os.path.join(data_dir, module_name)
        if not os.path.exists(module_dir):
            os.makedirs(module_dir)
        return module_dir

    def _process(self):
        """
        Implemented by each module class
        """
        raise NotImplementedError()

    def process(self, message: dict, data: bytes) -> None:
        """
        Process incoming message from the agent
        :param message: the JSON of the message
        :param data: bytearray incoming with the message
        """
        self.message = Message(message, data)
        self._process()

    def publish(self, content: str, color=None) -> None:
        """
        Forward the processed message to the output destination(s)
        :param content: message processed by modules
        :param color: color of message printed to file
        """
        metadata = {
            "timestamp": str(datetime.fromtimestamp((self.message.timestamp / 1000))),
            "thread": str(self.message.tid),
            "module": self.message.module,
            "function": self.message.symbol,
            "tid": self.message.tid,
        }

        if color:
            metadata["color"] = color

        self._connector_manager.forward(content, **metadata)
